---
import Layout from "../layouts/Layout.astro";

// Define interfaces for search results
interface Set {
  name: string;
  set_num: string;
  year: number;
  num_parts: number;
  theme_name: string;
  image_url?: string;
}

interface Minifig {
  name: string;
  fig_num: string;
  year_released: number;
  theme: string;
  image_url?: string;
}

interface Theme {
  name: string;
  parent_id?: number;
  parent_name?: string;
  sets_count?: number;
  year_from?: number;
  year_to?: number;
}

// Initialize empty arrays with proper types
let searchResults = {
  sets: [] as Set[],
  minifigs: [] as Minifig[],
  themes: [] as Theme[],
};

// Get search query from URL if present
const query = Astro.url.searchParams.get("q") || "";

if (query) {
  try {
    // Fetch search results from API
    const response = await fetch(
      `http://localhost:8787/api/search?q=${encodeURIComponent(query)}`
    );

    // Check if the response is successful
    if (response.ok) {
      const data = await response.json();
      searchResults = data.data || { sets: [], minifigs: [], themes: [] };
    } else {
      console.error("API error:", response.status);
      // Use mock data if API fails
      if (query.toLowerCase().includes("star")) {
        searchResults = {
          sets: [
            {
              name: "Millennium Falcon",
              set_num: "75192",
              year: 2017,
              num_parts: 7541,
              theme_name: "Star Wars",
              image_url:
                "https://via.placeholder.com/300?text=Millennium+Falcon",
            },
            {
              name: "Death Star",
              set_num: "75159",
              year: 2016,
              num_parts: 4016,
              theme_name: "Star Wars",
              image_url: "https://via.placeholder.com/300?text=Death+Star",
            },
          ],
          minifigs: [
            {
              name: "Luke Skywalker",
              fig_num: "sw0012",
              year_released: 1999,
              theme: "Star Wars",
              image_url: "https://via.placeholder.com/150?text=Luke+Skywalker",
            },
            {
              name: "Darth Vader",
              fig_num: "sw0001",
              year_released: 1999,
              theme: "Star Wars",
              image_url: "https://via.placeholder.com/150?text=Darth+Vader",
            },
          ],
          themes: [
            {
              name: "Star Wars",
              sets_count: 825,
              year_from: 1999,
              year_to: 2023,
            },
          ],
        };
      } else if (query.toLowerCase().includes("harry")) {
        searchResults = {
          sets: [
            {
              name: "Hogwarts Castle",
              set_num: "71043",
              year: 2018,
              num_parts: 6020,
              theme_name: "Harry Potter",
              image_url: "https://via.placeholder.com/300?text=Hogwarts+Castle",
            },
          ],
          minifigs: [
            {
              name: "Harry Potter",
              fig_num: "hp0001",
              year_released: 2001,
              theme: "Harry Potter",
              image_url: "https://via.placeholder.com/150?text=Harry+Potter",
            },
          ],
          themes: [
            {
              name: "Harry Potter",
              sets_count: 165,
              year_from: 2001,
              year_to: 2023,
            },
          ],
        };
      } else {
        // Default mock data for any other search
        searchResults = {
          sets: [
            {
              name: "Millennium Falcon",
              set_num: "75192",
              year: 2017,
              num_parts: 7541,
              theme_name: "Star Wars",
              image_url:
                "https://via.placeholder.com/300?text=Millennium+Falcon",
            },
            {
              name: "Hogwarts Castle",
              set_num: "71043",
              year: 2018,
              num_parts: 6020,
              theme_name: "Harry Potter",
              image_url: "https://via.placeholder.com/300?text=Hogwarts+Castle",
            },
          ],
          minifigs: [
            {
              name: "Iron Man",
              fig_num: "sh0001",
              year_released: 2012,
              theme: "Marvel",
              image_url: "https://via.placeholder.com/150?text=Iron+Man",
            },
          ],
          themes: [
            {
              name: "City",
              sets_count: 450,
              year_from: 2005,
              year_to: 2023,
            },
          ],
        };
      }
    }
  } catch (error) {
    console.error("Error fetching search results:", error);
    // Use default mock data if fetch fails
    searchResults = {
      sets: [
        {
          name: "Millennium Falcon",
          set_num: "75192",
          year: 2017,
          num_parts: 7541,
          theme_name: "Star Wars",
          image_url: "https://via.placeholder.com/300?text=Millennium+Falcon",
        },
        {
          name: "Hogwarts Castle",
          set_num: "71043",
          year: 2018,
          num_parts: 6020,
          theme_name: "Harry Potter",
          image_url: "https://via.placeholder.com/300?text=Hogwarts+Castle",
        },
      ],
      minifigs: [
        {
          name: "Iron Man",
          fig_num: "sh0001",
          year_released: 2012,
          theme: "Marvel",
          image_url: "https://via.placeholder.com/150?text=Iron+Man",
        },
      ],
      themes: [
        {
          name: "City",
          sets_count: 450,
          year_from: 2005,
          year_to: 2023,
        },
      ],
    };
  }
}

const hasResults =
  searchResults.sets.length > 0 ||
  searchResults.minifigs.length > 0 ||
  searchResults.themes.length > 0;
---

<Layout title="Search - Bricks Deal">
  <main class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-6">Search</h1>

    <div class="mb-8">
      <form action="/search" method="get">
        <div class="flex flex-wrap items-center gap-4">
          <div class="relative flex-auto">
            <input
              type="text"
              id="search-input"
              name="q"
              placeholder="Search for sets, minifigs, or themes..."
              value={query}
              class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            />
          </div>
          <div class="flex-none">
            <button
              type="submit"
              class="px-4 py-2 bg-lego-blue text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              Search
            </button>
          </div>
        </div>
      </form>
    </div>

    {
      query && (
        <div class="mb-4">
          <p class="text-gray-600">
            Search results for: <span class="font-semibold">{query}</span>
          </p>
        </div>
      )
    }

    {
      searchResults.sets.length > 0 && (
        <div class="mb-8">
          <h2 class="text-2xl font-bold mb-4">Sets</h2>
          <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
            {searchResults.sets.map((set) => (
              <div class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
                <div class="aspect-square overflow-hidden">
                  <img
                    src={
                      set.image_url ||
                      "https://via.placeholder.com/300?text=No+Image"
                    }
                    alt={set.name}
                    class="w-full h-full object-contain"
                  />
                </div>
                <div class="p-4">
                  <h3 class="text-lg font-semibold mb-1 line-clamp-2">
                    {set.name}
                  </h3>
                  <div class="text-sm text-gray-600 mb-2">
                    <span class="font-medium">{set.set_num}</span>
                  </div>
                  <div class="flex justify-between items-center mb-2">
                    <div class="text-sm text-gray-500">{set.year}</div>
                    <div class="text-sm">
                      <span class="font-medium">{set.num_parts}</span> pieces
                    </div>
                  </div>
                  <div class="text-xs px-2 py-1 bg-indigo-100 text-indigo-800 rounded-full inline-block">
                    {set.theme_name}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )
    }

    {
      searchResults.minifigs.length > 0 && (
        <div class="mb-8">
          <h2 class="text-2xl font-bold mb-4">Minifigures</h2>
          <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
            {searchResults.minifigs.map((minifig) => (
              <div class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
                <div class="aspect-square overflow-hidden">
                  <img
                    src={
                      minifig.image_url ||
                      "https://via.placeholder.com/150?text=No+Image"
                    }
                    alt={minifig.name}
                    class="w-full h-full object-contain"
                  />
                </div>
                <div class="p-4">
                  <h3 class="text-lg font-semibold mb-1 line-clamp-2">
                    {minifig.name}
                  </h3>
                  <div class="text-sm text-gray-600 mb-2">
                    <span class="font-medium">{minifig.fig_num}</span>
                  </div>
                  <div class="flex justify-between items-center">
                    <div class="text-sm text-gray-500">
                      {minifig.year_released}
                    </div>
                    <div class="text-xs px-2 py-1 bg-indigo-100 text-indigo-800 rounded-full inline-block">
                      {minifig.theme}
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )
    }

    {
      searchResults.themes.length > 0 && (
        <div class="mb-8">
          <h2 class="text-2xl font-bold mb-4">Themes</h2>
          <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
            {searchResults.themes.map((theme) => (
              <div class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
                <div class="p-6">
                  <h3 class="text-xl font-semibold mb-2">{theme.name}</h3>
                  <div class="text-sm text-gray-600 mb-4">
                    {theme.parent_id && (
                      <span>Part of {theme.parent_name}</span>
                    )}
                    {!theme.parent_id && <span>Main Theme</span>}
                  </div>
                  <div class="flex justify-between items-center">
                    <div class="text-sm">
                      <span class="font-medium">{theme.sets_count || 0}</span>{" "}
                      sets
                    </div>
                    <div class="text-sm text-gray-500">
                      {theme.year_from && theme.year_to
                        ? `${theme.year_from} - ${theme.year_to}`
                        : theme.year_from
                          ? `From ${theme.year_from}`
                          : ""}
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )
    }

    {
      query && !hasResults && (
        <div class="text-center py-12 bg-gray-50 rounded-lg border border-gray-200 mb-8">
          <p class="text-gray-500 text-lg mb-2">
            No results found for "{query}"
          </p>
          <p class="text-gray-400">
            Try different keywords or check your spelling
          </p>
        </div>
      )
    }
  </main>
</Layout>

<script>
  // Client-side search form handling
  document.addEventListener("DOMContentLoaded", () => {
    const searchForm = document.querySelector("form");
    const searchInput = document.getElementById("search-input");

    if (searchInput) {
      // Focus the search input on page load
      searchInput.focus();
    }
  });
</script>

